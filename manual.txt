(1) install node.js 
(2) npm install -g typescript
(3) npm tsc --init (to get tsconfig.json)

(4a) browser doesn't understand typescript, only javascript;
so we write our code in *.ts file, but then we have to compile 
it into *.js file for the browser to understand it, by typing:
- tsc sandbox.ts sandbox.js
- or just: tsc sandbox.ts (if both files are named the same)
- or just: tsc sandbox (if both files are named the same)
If output js file doesn't exist, it'll be created automatically for us.

WATCH FOR CHANGES: tsc -main.ts -w (to watch a specific file);

(4b) HOWEVER if we specify root and output directories (see 5),
we just do this:
- tsc -w (to watch every ts file in the root directory)

(5) tsconfig.json:
- "rootDir": "./src", (typescript input; before: // "rootDir": "./")
- "outDir": "./build/js", (javascript output; before: // "outDir": "./")
- "target": "es2016", (compiles with let/const) // or: "target": "es5", (with var)

(6) tsconfig.json:
- (optional) "noEmitOnError": true, (not to compile with errors)
  (alt) tsc --noEmitOnError -w (to overwrite tsconfig.json)

(7) tsconfig.json - add at the very bottom not to compile *.ts files created outside src folder:
{},
  "include": [
    "src"
  ] 

(8) JavaScript is a loosely & dynamically typed language (we don't have to specify the type and we can change the type at any time).
TypeScript is a strongly & statically typed language (we specify the type and can't change it later on).
TypeScript INFERS what type we mean even without stating it IMPLICITLY: let username = "Lucas";
However, we can EXPLICITLY state what variable we want to use: let username: string = "Lucas";

